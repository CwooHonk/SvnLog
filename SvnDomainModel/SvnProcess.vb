''' <summary>
''' A class that creates a process to query svn.
''' </summary>
Public Class SvnProcess
    Implements IDisposable

    Private mProcess As Process

    ''' <summary>
    ''' An exception assoiated to any svn errors.
    ''' </summary>
    Public Class SvnException
        Inherits Exception

        Public Property SvnError As New List(Of String)
        Public Property Command As String
    End Class

    ''' <summary>
    ''' A creates a process that can be used to query svn.
    ''' </summary>
    ''' <param name="arguments">Query command.</param>
    ''' <param name="svnPath">Path to the svn execeutable.</param>
    Public Sub New(ByVal arguments As String, ByVal svnPath As String)
        mProcess = New Process
        With mProcess
            .StartInfo.Arguments = arguments
            .StartInfo.FileName = svnPath

            .StartInfo.UseShellExecute = False
            .StartInfo.CreateNoWindow = True
            .StartInfo.RedirectStandardInput = True
            .StartInfo.RedirectStandardError = True
            .StartInfo.RedirectStandardOutput = True
        End With
    End Sub

    ''' <summary>
    ''' Executes the command.
    ''' </summary>
    ''' <returns>A string of the output generated by the svn command.</returns>
    ''' <remarks>Raise an SvnExcetion if somthing bad happens.</remarks>
    Public Function ExecuteCommand() As String
        mProcess.Start()

        'Conflicts ask for user input so dont read whole buuffer.
        Dim Errors = New List(Of String)
        Dim ErrorLine = mProcess.StandardError.ReadLine
        If ErrorLine <> String.Empty Then Errors.Add(ErrorLine)

        If MoreErrorsToRead() Then
            While (ErrorLine = mProcess.StandardError.ReadLine) <> String.Empty
                Errors.Add(ErrorLine)
            End While
        End If

        If Errors.Count > 0 Then
            Throw New SvnException() With {.SvnError = Errors, .Command = mProcess.StartInfo.Arguments}
        End If

        Dim Output = mProcess.StandardOutput.ReadToEnd

        Dim [Error] = mProcess.StandardError.ReadToEnd 'Might still happen if completly invalid command
        If [Error] <> String.Empty Then
            Errors.Add([Error])
            Throw New SvnException() With {.SvnError = Errors, .Command = mProcess.StartInfo.Arguments}
        End If

        Return Output
    End Function


    Private Function MoreErrorsToRead()
        Try
            If mProcess.HasExited Then Return False

            'Conflicts wait for user input, invalid merge commands do not
            Return Not mProcess.Responding
        Catch ex As InvalidOperationException
            'The process may close between the .HasExited and .Responding calls
            Return False
        End Try
    End Function


#Region "IDisposable Support"
    Private disposedValue As Boolean ' To detect redundant calls

    ' IDisposable
    Protected Overridable Sub Dispose(ByVal disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                ' TODO: dispose managed state (managed objects).
            End If

            mProcess.Dispose()
            ' TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
            ' TODO: set large fields to null.
        End If
        Me.disposedValue = True
    End Sub

    ' TODO: override Finalize() only if Dispose(ByVal disposing As Boolean) above has code to free unmanaged resources.
    'Protected Overrides Sub Finalize()
    '    ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
    '    Dispose(False)
    '    MyBase.Finalize()
    'End Sub

    ' This code added by Visual Basic to correctly implement the disposable pattern.
    Public Sub Dispose() Implements IDisposable.Dispose
        ' Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub
#End Region

End Class
